lass Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n=board.size();
        vector<pair<int,int>>cells(n*n+1); // storing n2 elements starting with 1 not 0
        int label=1; //staring the node as 1 not 0
        vector<int>columns(n); // 0..1..2..3...4..5..
        iota(columns.begin(),columns.end(),0);// it will add up the column by +1 i.e 0 ... 1... 2.... 3....4....5
        
        for(int row=n-1;row>=0;row--){
            for(int column:columns){
                //traverse the rows from bottom and this loop is to give index for each cells from bottom to top for eg, for 1 cell index is [5,0]..[5,1]
                cells[label++]={row,column};
            }
            reverse(columns.begin(),columns.end());//start from back side of the board.
        }

        vector<int>dist(n*n+1,-1); //initially every cell has -1 distance
        queue<int>q;
        dist[1]=0;// intially distance from the value of the cell1 is 0

        q.push(1);
        while(!q.empty()){
            int curr=q.front();
            q.pop();
            


            for(int next=curr+1;next<=min(curr+6,n*n);next++){
                auto[row,column]=cells[next];
                int destination=board[row][column]!=-1?board[row][column]:next;
                if(dist[destination]==-1){
                    dist[destination]=dist[curr]+1;
                    q.push(destination);
                }
            }
        } 



return dist[n*n];
        
    }
};


https://www.youtube.com/watch?v=XlQGPZ0cdJE
