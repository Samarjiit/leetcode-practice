class Solution {
public:

    vector<int>getLSL(vector<int>&arr,int n){
        vector<int>ans(n);
        stack<int>st;
        for(int i=0;i<n;i++){
            if(st.empty())ans[i]=-1;
            else{
                while(!st.empty()&& arr[st.top()]>arr[i]){
                    st.pop();
                    }
                 ans[i]=st.empty()?-1:st.top();
                }
                st.push(i);
            }
        return ans;

    }
    vector<int>getLSR(vector<int>&arr,int n){
         vector<int>ans(n);
        stack<int>st;
        for(int i=n-1;i>=0;i--){
            if(st.empty())ans[i]=n;
            else{
                while(!st.empty()&&arr[st.top()]>=arr[i]){
                    st.pop();
                    }
                 ans[i]=st.empty()?n:st.top();
                }
                st.push(i);
            }
        return ans;
    }
    int sumSubarrayMins(vector<int>& arr) {
        int n=arr.size();
        vector<int>NSL=getLSL(arr,n);
        vector<int>NSR=getLSR(arr,n);

        long long sum=0;
        long m=1e9+7;

        for(int i=0;i<n;i++){
            long long ls=i-NSL[i];
            long long rs=NSR[i]-i;
            long long totalways=ls*rs;
            long long totalsum=totalways*arr[i];
            sum=(sum+totalsum)%m;
        }
        return sum;
    }
};
