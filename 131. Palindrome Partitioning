class Solution {
public:
    void back(int index,string s,vector<string>&path,vector<vector<string>>&ans){
    //base case
    if(index==s.size()){
        ans.push_back(path); //Base Condition, which means when we have done partition at the end (n), then add it to our ultimate result
        return;
    }

    for(int i=index;i<s.size();i++){
        if(ispalindrome(s,index,i)){// // what we are checking over here is, if we partition the string from index to i Example-(0, 0) is palindrome or not
            path.push_back(s.substr(index,i-index+1));//take the substring and store it in our list & call the next substring from index + 1
            back(i+1,s,path,ans);//as we have done for (0, 0) then our next will be from (1)
            path.pop_back();// please make sure you remove when you backtrack. 
        }
    }
    }

    bool ispalindrome(string s,int start,int end){ //A simple palindromic function start from 0 go till end. And basically keep on checking till they don't cros
        while(start<=end){
            if(s[start++]!=s[end--])
                return false;
            
        }
        return true;
    }




    vector<vector<string>> partition(string s) {
        vector<string>path;
        vector<vector<string>>ans;
        back(0,s,path,ans);
        return ans;
    }
};

//t.c o(n2n)
//s.c o(n)
