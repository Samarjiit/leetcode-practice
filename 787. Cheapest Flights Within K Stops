class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
       vector<pair<int,int>>adj[n]; //storing src destination .....A pair is a container which stores two values mapped to each other, and a vector containing multiple number of such pairs is called a vector of pairs.
       for(auto it:flights){
           adj[it[0]].push_back({it[1],it[2]});  //graph creation done
       } 
       queue<pair<int,pair<int,int>>>q;
       q.push({0,{src,0}});//store k stops (intitially 0), src , initial cost=0
       vector<int>dist(n,1e9);
       dist[src]=0;//intially dist is 0

       while(!q.empty()){
           auto it=q.front();
           q.pop();
           int stops=it.first;
           int node=it.second.first;
           int cost=it.second.second;

           if(stops>k)continue; //no need to go to any adjacency citites just drop it
           for(auto iter:adj[node]){
               int adjnode=iter.first;
               int ediff=iter.second;
               if(cost+ediff<dist[adjnode] && stops<=k){
                    dist[adjnode]=cost+ediff;
                    q.push({stops+1,{adjnode,cost+ediff}});
                                   
           }}
       }

       if(dist[dst]==1e9)return -1;
       return dist[dst];
    }
};

//here first priority of judgement is no of stops not cost .alos we dont require min heap(order in asc) b/c stops will automatically put in asce order from top to bottom of the queue.

//t.c o(e) no of edges/planes
